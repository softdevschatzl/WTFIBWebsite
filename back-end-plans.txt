If you have your front-end in React.js, that's a great start! If you'd like the producer to be able to make updates themselves and potentially even handle eCommerce, you might want to look into a headless CMS solution. 

A headless CMS is a back-end-only content management system that makes content accessible via an API for display on any device. With a headless CMS, you can control and reuse content across different types of platforms (websites, mobile apps, IoT devices, etc.). 

Here are some options you might consider:

- **Strapi**: Strapi is an open-source, JavaScript-based, headless CMS. It's built with Node.js, so it will mesh well with your React front-end. It's very developer-friendly, highly customizable and offers a comfortable interface for non-technical users to manage content.

- **Contentful**: Contentful is another headless CMS that's quite popular. It's a cloud-based platform that offers a lot of flexibility and a good user interface.

- **Sanity**: Sanity is a powerful and flexible headless CMS that can fit into modern workflows using JavaScript and React.

For handling sales and services:

- **Stripe or PayPal**: These are excellent payment platforms that can handle transactions for you. Both offer comprehensive APIs that you can use to integrate payment processing into your website.

- **Snipcart**: If you need a shopping cart system that works well with a headless setup, Snipcart is a great option. It provides you with a shopping cart platform that integrates well with your chosen tech stack.

Finally, to handle your music, consider using an existing music streaming service API:

- **SoundCloud or Spotify API**: These could be used to integrate your music directly into the website, allowing users to listen to tracks before deciding to make a purchase.

As for hosting, you might look into cloud-based services like Amazon AWS, Google Cloud, or Netlify. If you're using a Node.js-based backend, these services would all be capable of hosting your site. They also offer scalable solutions in case your traffic increases. 

Remember, these are just suggestions. The best tech stack for you will depend on your specific requirements and the skills available to your development team.